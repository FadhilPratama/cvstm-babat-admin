generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  banners    Banner[]   @relation("StoreToBanner")
  categories Category[] @relation("StoreToCategory")
  product    Product[]  @relation("StoreToProduct")
}

model Banner {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBanner", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  bannerId  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  banner    Banner    @relation(fields: [bannerId], references: [id])
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products  Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([bannerId])
}

model Product {
  id                String   @id @default(uuid())
  storeId           String
  categoryId        String
  name              String
  isArchived        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isFeatured        Boolean  @default(false)
  activeIngredients String?
  description       String?
  manufacturer      String?
  netWeight         String?
  packaging         String?
  shelfLife         String?
  images            Image[]
  category          Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  store             Store    @relation("StoreToProduct", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @unique @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}
